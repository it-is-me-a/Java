/*
 * qq服务器，监听等待客户端的连接
 */
package com.qq.server.model;

import java.net.*;
import java.io.*;
import java.util.*;

import com.qq.common.*;
import com.qq.server.tools.ManageServerConClientThread;
import com.qq.server.tools.ServerConnectClientThread;

public class MyQQServer implements java.io.Serializable{

	public MyQQServer(){
		try {
			System.out.println("我是服务器,我在8080监听");
			ServerSocket sc = new ServerSocket(8080);
			while(true){
				//阻塞等待连接
				Socket s = sc.accept();
				
				//接收数据
				ObjectInputStream ois = new ObjectInputStream(s.getInputStream());
				User u = (User)ois.readObject();

				//拿到U后得验证,应该是到数据库去拿数据，但是这会先简单来吧 简单的规则是：如果密码是123456就认为成功
				Message ms = new Message();
				
				//将验证完后的信息返回
				ObjectOutputStream oos = new ObjectOutputStream(s.getOutputStream());
				if(u.getPasswd().equals("123456")){
					ms.setMesType("1");
					oos.writeObject(ms);
					
					//成功登录后，服务器为客户端单开一个线程来负责该客户端的通讯
					ServerConnectClientThread scct = new ServerConnectClientThread(s);
					
					//将新开的线程加入到 hashmap 
					ManageServerConClientThread.addClientThread(scct, u.getUserId());
					
					//启动通讯线程
					scct.start();
					
					//并通知其他在线用户说我上线了
					scct.NoticeOther(u.getUserId());
					
				}else{
					ms.setMesType("2");
					oos.writeObject(ms);
					//密码错误，关闭连接
					s.close();
				}
			}
	
			
			
		} catch (Exception e) {
			e.printStackTrace();//打印出异常
		}
	}
	
	
}
